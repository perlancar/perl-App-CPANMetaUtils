#!perl

use 5.010001;
use strict;
use warnings;

use ExtUtils::MakeMaker;
use File::chdir;
use Perinci::CmdLine::Any;
use Perinci::Sub::Util qw(err);

our %SPEC;

$SPEC{gen_cpan_meta} = {
    v => 1.1,
    summary => 'Generate CPAN Meta (2.0, META.json) for a dist',
    description => <<'_',

NOTE: EARLY VERSION.

This utility assumes it is run in the top-level directory of a Perl distribution
and will try to generate a CPAN META structure for the distribution. For
example: `abstract` will be searched from POD, `name` from the shortest package
name, `version` from the main module, `prereqs` using <pm:App::ScanPrereqs> and
so on. Finally it will validate its generated META.json first before outputing
it, printing found errors to stderr.

_
    args => {
        dir => {
            schema => 'dirname*',
            pos => 0,
        },
        # XXX option to output to file (default META.json)
        # XXX option to overwrite existing file
    },
};
sub gen_cpan_meta {
    require App::ScanPrereqs;
    require CPAN::Meta::Validator;
    require File::Find::Wanted;
    require File::Slurper;
    require JSON;

    my %args = @_;

    local $CWD = $args{dir} if defined $args{dir};

    my $meta = {};

    (-d "lib") or return [412, "lib/ directory expected"];
    my @lib_files =
        sort { length($a) <=> length($b) }
        File::Find::Wanted::find_wanted(
            sub { -f && /\.pm$/ }, "lib");

    @lib_files or return [412, "Can't find any .pm files under lib/"];

    # pick the shortest module to be the dist name
    my $pkg = $lib_files[0];
    $pkg =~ s!lib/!!; $pkg =~ s/\.pm$//; $pkg =~ s!/!::!g;

    # name
    {
        (my $name = $pkg) =~ s/::/-/g;
        $meta->{name} = $name;
    }

    # version
    {
        my $v = MM->parse_version($lib_files[0]);
        $v = undef if defined($v) && $v eq 'undef';
        defined $v or return [412, "Can't extract version from $lib_files[0]"];
        $meta->{version} = $v;
    }

    my $ct = File::Slurper::read_text($lib_files[0]);
    $ct =~ /^=head1 NAME\R\R\S+ - (.+)/m or last;

    # abstract
    {
        $meta->{abstract} = $1;
    }

    # meta-spec
    {
        $meta->{'meta-spec'} = {
            url => "http://search.cpan.org/perldoc?CPAN::Meta::Spec",
            version => 2,
        };
    }

    # generated by
    {
        $meta->{'generated_by'} = "gen-cpan-meta version " .
            ($main::VERSION // "dev");
    }

    # prereqs
    {
        my $res;

        $res = App::ScanPrereqs::scan_prereqs(
            scanner => "regular",
            files => [grep {-d} "lib", "bin", "script", "scripts"]);
        return err("Can't scan runtime prereqs", $res) unless $res->[0] == 200;
        my %runtime_prereqs;
        for my $e (@{ $res->[2] }) {
            $runtime_prereqs{$e->{module}} = $e->{version};
        }

        $res = App::ScanPrereqs::scan_prereqs(
            scanner => "regular",
            files => [grep {-d} "t", "xt"]);
        return err("Can't scan test prereqs", $res) unless $res->[0] == 200;
        my %test_prereqs;
        for my $e (@{ $res->[2] }) {
            my $v;
            if (defined $runtime_prereqs{$e->{module}}) {
                $v = version->parse($e->{version})
                    > version->parse($runtime_prereqs{$e->{module}}) ?
                    $e->{version} : $runtime_prereqs{$e->{module}};
;
                # use test version if larger
                $runtime_prereqs{$e->{module}} = $v;
            } else {
                $v = $e->{version};
                $test_prereqs{$e->{module}} = $v;
            }
        }
        $meta->{prereqs}{runtime}{requires} = \%runtime_prereqs;
        $meta->{prereqs}{test}{requires} = \%test_prereqs;
    }

    # author
    {
        my $author;
        if ($ct =~ /^=head1 AUTHORS?\R\R(.+)/m) {
            $author = $1;
        } else {
            $author = 'John Doe <john.doe@example.com>';
        }
        $meta->{author} = [$author];
    }

    # license (assumed to be perl5)
    {
        $meta->{license} = ["perl_5"];
    }

    # dynamic_config (assumed to be 0)
    {
        $meta->{dynamic_config} = 0;
    }

    # release_status (assumed to be stable)
    {
        $meta->{release_status} = 'stable';
    }

    # XXX resources

    # XXX x_authority?

    # let's validate it first
    {
        my $cmv = CPAN::Meta::Validator->new($meta);
        unless ($cmv->is_valid) {
            print "WARN: Error from validator: $_\n" for $cmv->errors;
        }
    }

    [200, "OK", JSON->new->canonical(1)->pretty->encode($meta)];
}

Perinci::CmdLine::Any->new(
        url => '/main/gen_cpan_meta',
)->run;

# ABSTRACT:
# PODNAME:

=head1 SEE ALSO

L<CPAN::Meta>
