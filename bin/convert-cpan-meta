#!perl

use 5.010001;
use strict;
use warnings;

use Perinci::CmdLine::Any;

our %SPEC;

my $sch_version = ['str*', in=>[qw/1 1.0 1.1 1.2 1.3 1.4 2.0/]];

$SPEC{convert_cpan_meta} = {
    v => 1.1,
    summary => 'Convert CPAN META',
    description => <<'_',

Will output the new META as JSON.

_
    args => {
        file => {
            schema => 'filename*',
            pos => 0,
        },
        from_version => {
            schema => $sch_version,
        },
        to_version => {
            schema => $sch_version,
        },
    },
    examples => [
        {
            summary => 'Convert META.yml (1.4) to META.json (2.0)',
            argv => [qw/--version 2/],
        },
    ],
};
sub convert_cpan_meta {
    require CPAN::Meta::Converter;
    require File::Slurper;
    require JSON;
    require YAML::XS;

    my %args = @_;

    my $to_version = $args{to_version} // "2.0";
    my $from_version = $args{from_version};
    my $file = $args{file};
    unless (defined $file) {
        if (-f "META.json") {
            $file = "META.json";
        } elsif (-f "META.yml") {
            $file = "META.yml";
        } else {
            return [400, "Please specify file"];
        }
    }
    my $content = File::Slurper::read_text($file);
    my $meta;
    if ($file =~ /\.ya?ml$/i) {
        $from_version //= "1.4";
        $meta = YAML::XS::Load($content);
    } elsif ($file =~ /\.json$/i) {
        $from_version //= "2.0";
        $meta = JSON->new->decode($content);
    }

    my $cmc = CPAN::Meta::Converter->new($meta);
    my $new_meta = $cmc->convert(
        version => $to_version,
    );

    [200, "OK", JSON->new->canonical(1)->pretty->encode($meta)];
}

Perinci::CmdLine::Any->new(
        url => '/main/convert_cpan_meta',
)->run;

# ABSTRACT:
# PODNAME:

=head1 SEE ALSO

L<CPAN::Meta>, L<CPAN::Meta::Converter>
